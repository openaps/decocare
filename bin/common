#!/bin/bash

export LOG='status-quo.log'
export LOG_DIR='logs'
export TIME="%C\n\telapsed %E\n\tuser %U\n\tsystem %S\n\tCPU %P (%Xtext+%Ddata %Mmax)k"

function repro ( ) {
  self=$0
  echo '##' "$*"
  echo ""
  if [[ "$self" = "/bin/bash" ]] ; then
    echo '```'$(basename $self)
    echo '#!'$self
    echo '. bin/common'
    for command in $* ; do
      echo $command
    done
    echo '```'
  else
    echo '```bash'
    cat $NAME
    echo '```'

  fi
  echo ""

}

function run_stick ( ) {
  echo '```'
  TIME="$TIME" time python decocare/stick.py ${PORT} 2>&1 | tee logs/stick.log
  echo '```'
}
function run_baseline ( ) {
  echo '```'
  TIME="$TIME" time python decocare/stick.py ${PORT} 2>&1 | tee logs/baseline.stick.log
  echo '```'
}
function run_postmortem ( ) {
  echo '```'
  TIME="$TIME" time python decocare/stick.py ${PORT} 2>&1 | tee logs/postmortem.stick.log
  echo '```'
}
function run_session ( ) {
  echo '```'
  TIME="$TIME" time python decocare/session.py ${PORT} ${SERIAL} 2>&1 | tee logs/session.log
  echo '```'
}
function run_commands ( ) {
  echo '```'
  TIME="$TIME" time python decocare/commands.py ${PORT} ${SERIAL} 2>&1 | tee logs/commands.log
  echo '```'
}

function run_download ( ) {
  echo '```'
  TIME="$TIME" time python decocare/download.py ${PORT} ${SERIAL} 2>&1 | tee logs/download.log
  echo '```'
}

function dump_repro ( ) {
  if [[ "$NAME" = "/bin/bash" ]] ; then
    NAME='status-quo.sh'
  fi
  cat $NAME
}

function contrast_baseline_postmortem_stats ( ) {
  tail -n 13 logs/baseline.stick.log  logs/postmortem.stick.log

}

function summarize_commands ( ) {
  log=${1-"${LOG_DIR}/commands.log"}
  echo ""
  echo -n '## commands session:finished: '
  grep -E "session:finished executing" $log | sort | uniq | wc -l
  echo ""
  echo '```'
  grep -E "session:finished executing" $log | sort | uniq
  echo '```'
  echo ""

}

function summarize_pages ( ) {
  log=${1-"${LOG_DIR}/commands.log"}
  echo ""
  echo -n '## downloaded: '
  grep -E "session:finished.*ReadHistory" $log | grep "data\[1024\]" | sort | uniq | wc -l
  echo ""
  echo '```'
  grep -E "session:finished executing.*ReadHistory" $log | sort | uniq
  echo '```'
  echo ""

}

function explain_markdown ( ) {

  echo "# ${NAME} ${CMD}" > explain.markdown

  echo "## cat ${NAME}" >> explain.markdown
  echo '```bash'        >> explain.markdown
  # cat $NAME             >> explain.markdown
  echo '```'            >> explain.markdown

  echo "## cat logs/explain.log" >> explain.markdown
  cat logs/explain.log           >> explain.markdown
}

function explain_running ( ) {
  log=$1
  tail -n 4 $log
}

function run_all ( ) {

  echo "## run all ${NAME} ${CMD}"
  echo $NAME
  dump_repro
  date
  run_baseline
  run_session
  run_commands
  echo "Was there an ACK ERROR?"
  echo "### DIAGNOSE CRC"
  run_postmortem
  run_download
  # run_stick
}

function diagnose_crc ( ) {

  grep -n --color  -E "howdy|clear_bu|NAK|BAD|CRC|ACK|IGNORE|download|traceback|critical|(errors|packets).(crc|naks|sequence|timeouts|received|transmit)" $LOG

}

function diagnose_nak ( ) {

  grep -n -C 20 "NAK" $LOG

}

function only_stats ( ) {

  grep -n -E "(errors|packets).(crc|naks|sequence|timeouts|received|transmit)" -

}

function stick_ok ( ) {
  echo ""
}

function summarize_stick ( ) {
  log=${1-${LOG}}
  expect=${2-4}
  echo ""
  if [[ $expect -eq $(grep -E "howdy" $log | grep stick | wc -l) ]] ; then
    echo "* stick runs appear to be ok"
  else
    echo "* not ok"
  fi

}


function old_summarize_stick ( ) {
  echo ""
  if [[ 4 -eq $(grep -E "howdy" $LOG | grep stick | wc -l) ]] ; then
    echo "* stick runs appear to be ok"
  else
    echo "* not ok"
  fi
  echo ""

}

function summarize_pump ( ) {
  _error=0
  echo ""
  echo -n '## downloaded: '
  grep -E "session:finished.*ReadHistory" $LOG | grep "data\[1024\]" | sort | uniq | wc -l
  echo ""
  echo '```'
  grep -E "session:finished executing.*ReadHistory" $LOG | sort | uniq
  echo '```'
  echo ""
  echo ""
  echo -n '## commands session:finished: '
  grep -E "session:finished executing" $LOG | sort | uniq | wc -l
  echo ""
  echo '```'
  grep -E "session:finished executing" $LOG | sort | uniq
  echo '```'
  echo ""

  if [[ 4 -lt $(grep -E "howdy" $LOG | grep pump | wc -l) ]] ; then
    echo '## howdy! pump runs appear to be OK'
    echo ""
  else
    _error=1
    echo 'howdy! pump runs were NOT OK'

    echo ""
    echo "### Last send command"
    echo ""
    echo '```'
    grep -B 1000 -E "Traceback" $LOG | grep -A 2 -E "Transmit" | tail -n 4
    echo '```'

    echo "### stats before traceback"
    echo ""
    echo '```'
    grep -A 1000 -E "Traceback" $LOG | only_stats | head -n 20
    echo '```'


    echo "### Traceback"
    echo ""
    echo '```'
    grep -B 10 -A 15 -E "Traceback" $LOG
    echo '```'
  fi


  if [[ 0 -eq $(grep -E "BadCRC" $LOG | wc -l) ]] ; then
    echo "* NO CRC ERROR FOUND"
  else
    if [[ 0 -eq $(grep -E "BadCRC" $LOG | grep -v -E 'returning empty|IGNORE' | wc -l) ]] ; then
      echo ""
      echo -n '## CRC errors found, caught, recovered: '
      grep -n -E "BadCRC" $LOG | grep -E "returning empty|IGNORE" | wc -l
      echo ""
      echo '```'
      grep -n -E "BadCRC" $LOG | grep -E "returning empty|IGNORE"
      echo '```'
      echo ""
    else
      _error=1
      echo ""
      echo '## Diagnose CRC'
      echo ""
      echo '```'
      diagnose_crc
      echo '```'
      echo ""
    fi
  fi
  if [[ 0 -eq $(grep -E "NAK" $LOG | wc -l) ]] ; then
    echo "* no nak found"
  else
    _error=1
    echo ""
    echo "## NAK FOUND"
    echo ""
    echo '```'
    diagnose_nak
    echo '```'
    echo ""
  fi

  if [[ 0 -eq $_error ]] ; then
    echo "* SUCCESS, GOOD CLEAN RUN"
  else
    echo "* NOT A CLEAN RUN"
  fi

}

function print_csv( ) {
   ./history/extractBolus.sh $* \
     | cat | grep -v "Current"  \
     | cut -d',' -f 16,15,17,1,2,3,4,5,6,7,8,9,10,11,12,13,14 \
     | column -x -t -s , -n
}

function filter_log( ) {
   ./history/extractBolus.sh $* \
     | cat | grep -v "Current"  \
     | cut -d',' -f 16,15,17,1,2,3,4,5,6,7,8,9,10,11,12,13,14
}

function print_pretty_csv( ) {
  header=( )
  _OLD_IFS=$IFS
  i=0
  filter_log $* | while read LINE ; do
  WSP_IFS=$'\x20'$'\x09'$'\x0A'$'\x0D'
  # read -a columns<<<$LINE
  LINE=$(echo $LINE | tr -d '\n' | tr -s ' ')
  IFS=","
  columns=($LINE)
  IFS=$WSP_IFS
  # echo "number of columns" ${#columns[*]}
  if [[ ${#header} = 0 ]] ; then
    if [[ ${#columns[*]} = 17 ]] ; then
      IFS=","
      header=($LINE)
      IFS=$WSP_IFS
      # echo 'reset header'
      echo ${header[@]}
    else
      echo 'unknown' $LINE
    fi
  else
    # echo 'each value' ${#header[*]}
    name=${columns[15]}
    descr=${columns[16]}
    timestamp=${columns[0]}
    if [[ $name = "" ]] ; then
      continue
    fi
    echo RECORD: $i $timestamp $name
    echo ${descr} | sed -e "s/ && /, /g" | fmt | sed -e "s/^/  /g"

    _clean=1
    for x in $(seq 0 $(expr ${#header[*]} - 1)) ; do
      # echo $col
      key="${header[$x]}"
      value="${columns[$x]}"

      if [[ -n "$value"  ]] ; then
        if [[ $_clean = 0 ]] ; then
          echo
        fi
        echo -n '    '"$x: "
        echo ${key}: ${value}
        _clean=1
      else
        echo -n .
        _clean=0
      fi
      # echo -n $x.
    done
    i=$(expr $i + 1)
    # echo 'done'
    echo
  fi
  

  done

  IFS=$WSP_IFS

}

TOOL=list_history.py
TOOL_ARGS=""

function opcodes ( ) {
  x=${1}
  python3 $TOOL $TOOL_ARGS $x 2>&1

}

function run_regress ( ) {
  mkdir -p analysis/${SERIAL}
  in_prefix=${1-'logs'}
  pages=${2-'ReadHistoryData-page-*.data'}
  for x in ${in_prefix}/${pages}; do
    echo $x
    opcodes $x | tee analysis/${SERIAL}/$(basename $x).list_opcodes.markdown
  done

}

function set_tool_args ( ) {
  export TOOL_ARGS=$1
}

function find_missing_for ( ) {
  x=${1}
  echo -n "### $x: "
  grep -B 60 -A 70 MISSING -E $x | grep MISSING | wc -l
  grep -B 60 -A 70 MISSING -E $x

}

function find_missing_records ( ) {
  for x in analysis/bewest-pump/*list_opcodes.markdown ; do
    find_missing_for $x
    echo
  done 
}

function update_missing_analysis ( ) {
  find_missing_records > analysis/bewest-pump/missing-dates.markdown
}

function find_midnights_page ( ) {
  x=${1}
  echo -n "### MIDNIGHTS $x: "
  grep -B 20 -A 40 -E --color "page|START|Result" $x | grep "RECORD.*ResultTotals" | wc -l
  grep -B 20 -A 40 -E --color "page|START|Result" $x 
}

function analyze_midnights ( ) {
  for x in analysis/bewest-pump/*list_opcodes.markdown ; do
    find_midnights_page $x
  done
}

function update_midnights_analysis ( ) {
  for x in analysis/bewest-pump/*list_opcodes.markdown ; do
    find_midnights_page $x > ${x%.data.list_opcodes.markdown}-midnight.markdown
  done
}

function find_special_bolus_page ( ) {
  x=${1}
  echo -n "### $x: "
  grep -B 15 -A 30 -E "(RECORD|MISSING|null first).* 0x5c" $x | grep RECORD | grep Bolus | wc -l
  grep -B 15 -A 30 -E "(RECORD|MISSING|null first).* 0x5c" $x

}

function analyze_special_bolus ( ) {
  for x in analysis/bewest-pump/*list_opcodes.markdown ; do
    find_special_bolus_page $x
    echo
  done
}

function update_special_bolus_analysis ( ) {
  analyze_special_bolus > analysis/bewest-pump/special-bolus.markdown
}

function find_csv_time ( ) {
  SEARCH=$1
  #csv=$( find . -type f -name "*.csv" -print )
  for csv in $( find . -type f -name "*.csv" ) ; do
    echo '###' $csv
    grep -C 2 --color="always" "$SEARCH" -- $csv | tr -s ','
  done

  #echo git grep  -C 2 "$SEARCH" -- "$csv"
    # | grep --color -C 2 "SEARCH" | less
}

#####
# EOF
